#!/usr/bin/env python3
"""
Created on Thu Jan 20 20:20:20 2020

@author: Conceptual Airplane Design & Operations (CADO team)
         Nicolas PETEILH, Pascal ROCHES, Nicolas MONROLIN, Thierry DRUOT
         Avionic & Systems, Air Transport Departement, ENAC
"""

from marilib.utils import earth, unit

import numpy as np
from scipy.optimize import fsolve

from marilib.utils.math import vander3, trinome, maximize_1d






class HandlingQuality(object):
    """
    Master class for all aircraft handling qualities
    """
    def __init__(self, aircraft):
        self.aircraft = aircraft

        self.forward_cg_req = None
        self.forward_cg_stall = None

        self.backward_cg_req = None
        self.backward_cg_stab = None
        self.backward_cg_oei = None

    def analysis(self):
        """Evaluate CG bounds according to HQ constraints
        """
        # Required forward CG position
        #------------------------------------------------------------------------------------------------------
        self.forward_cg_req = (  self.aircraft.weight_cg.owe
                               + self.aircraft.airframe.cabin.pax_max_fwd_cg * self.aircraft.airframe.cabin.pax_max_fwd_mass \
                               + self.aircraft.airframe.cargo.freight_max_fwd_cg * self.aircraft.airframe.cargo.freight_max_fwd_mass \
                               + self.aircraft.airframe.tank.fuel_max_fwd_cg * self.aircraft.airframe.cargo.fuel_max_fwd_mass )
                             /(   self.aircraft.airframe.cabin.pax_max_fwd_mass \
                                + self.aircraft.airframe.cargo.freight_max_fwd_mass \
                                + self.aircraft.airframe.cargo.fuel_max_fwd_mass)



        # Required backward CG position
        #------------------------------------------------------------------------------------------------------





        # Forward limit : trim landing
        #------------------------------------------------------------------------------------------------------
        altp = unit.m_ft(0.)
        disa = 0.
        nei = 0
        speed_mode = 1
        hld_conf = self.aircraft.aerodynamics.hld_conf_ld
        mass = c_g.max_fwd_mass

        cg_max_fwd_stall,speed,fn,aoa,ih,c_z,cx_trimmed = self.forward_cg_stall(aircraft,altp,disa,nei,hld_conf,speed_mode,mass)

        c_g.max_fwd_trim_cg = cg_max_fwd_stall         # Forward cg limit

        c_g.cg_constraint_1 = (c_g.max_fwd_req_cg - c_g.max_fwd_trim_cg) / c_g.max_fwd_req_cg

        # Backward limit : static stability
        #------------------------------------------------------------------------------------------------------
        stability_margin = regul.static_stability_margin()

        cg_max_bwd_stab = self.backward_cg_stab(aircraft,stability_margin)

        c_g.max_bwd_stab_cg = cg_max_bwd_stab          # Backward cg limit

        c_g.cg_constraint_2 = (c_g.max_bwd_stab_cg - c_g.max_bwd_req_cg) / c_g.max_bwd_req_cg

        # Vertical tail sizing
        #------------------------------------------------------------------------------------------------------

        self.vertical_tail_sizing(aircraft)

        c_g.cg_constraint_3 = (c_g.max_bwd_oei_cg - c_g.max_bwd_oei_req_cg) / c_g.max_bwd_oei_req_cg

        return

    def forward_cg_stall(aircraft,altp,disa,nei,hld_conf,speed_mode,mass):
        """Computes max forward trimmable CG position at stall speed
        """
        wing = aircraft.wing
        htp = aircraft.horizontal_tail

        r,gam,Cp,Cv = earth.gas_data()

        [pamb,tamb,tstd,dtodz] = earth.atmosphere(altp,disa)

        [cz_max_wing,cz0] = airplane_aero.high_lift(wing, hld_conf)     # Wing maximum lift coefficient without margin

        [cza_htp,xlc_htp,aoa_max_htp,ki_htp] = frame_aero.htp_aero_data(aircraft)

        cz_max_htp = cza_htp*aoa_max_htp

        c_z = cz_max_wing - cz_max_htp      # Max forward Cg assumed, HTP has down lift

        mach = flight.speed_from_lift(aircraft,pamb,tamb,c_z,mass)

        [cza_wo_htp,xlc_wo_htp,ki_wing] = frame_aero.wing_aero_data(aircraft,mach,hld_conf)

        if(nei>0):
            dcx_oei = nei*propu.oei_drag(pamb,mach)
        else:
            dcx_oei = 0.

        dw_angle = frame_aero.wing_downwash(aircraft,cz_max_wing)    # Downwash angle due to the wing
        cx_basic,lod_trash = airplane_aero.drag(aircraft,pamb,tamb,mach,cz_max_wing)    # By definition of the drag_ function
        cxi_htp = (ki_htp*cz_max_htp**2)*(htp.area/wing.area)   # Induced drag generated by HTP
        cx_inter = cz_max_htp*dw_angle      # Interaction drag (due to downwash)
        cx_trimmed = cx_basic + cxi_htp + cx_inter + dcx_oei

        fn = 0.5*gam*pamb*mach**2*wing.area*cx_trimmed

        cm_prop = propu.thrust_pitch_moment(aircraft,fn,pamb,mach,dcx_oei)

        cg_max_fwd_stall = (cm_prop + xlc_wo_htp*cz_max_wing - xlc_htp*cz_max_htp)/(cz_max_wing - cz_max_htp)

        aoa_wing = (cz_max_wing-cz0) / cza_wo_htp   # Wing angle of attack
        aoa = aoa_wing - wing.setting               # Reference angle of attack (fuselage axis versus air speed)
        ih = - aoa + dw_angle - aoa_max_htp         # HTP trim setting

        speed = flight.get_speed(pamb,speed_mode,mach)

        return cg_max_fwd_stall,speed,fn,aoa,ih,c_z,cx_trimmed

    def backward_cg_stab(aircraft,stability_margin):
        """Computes max backward CG position according to static stability (neutral point position)
        """
        aerodynamics = aircraft.aerodynamics
        wing = aircraft.wing

        mach = 0.25
        hld_conf = aerodynamics.hld_conf_clean

        [cza_wo_htp,xlc_wo_htp,ki_wing] = frame_aero.wing_aero_data(aircraft,mach,hld_conf)

        [cza_htp,xlc_htp,aoa_max_htp,ki_htp] = frame_aero.htp_aero_data(aircraft)

        cg_max_bwd_stab =  (xlc_wo_htp*cza_wo_htp + xlc_htp*cza_htp*(1-ki_wing*cza_wo_htp)) \
                         / (cza_wo_htp + cza_htp*(1-ki_wing*cza_wo_htp)) \
                         - stability_margin*wing.mac

        return cg_max_bwd_stab

    def vertical_tail_sizing(aircraft):
        """Computes maximum backward CG position to meet engine failure case constraint
        WARNING : Influence of CG position is ignored
        """
        design_driver = aircraft.design_driver
        propulsion = aircraft.propulsion
        wing = aircraft.wing
        vtp = aircraft.vertical_tail
        aerodynamics = aircraft.aerodynamics
        payload = aircraft.payload
        c_of_g = aircraft.center_of_gravity

        (MTO,MCN,MCL,MCR,FID) = propulsion.rating_code

        cyb_vtp,xlc_vtp,aoa_max_vtp,ki_vtp = frame_aero.vtp_aero_data(aircraft)

        payload = 0.5*payload.nominal               # Light payload
        range = design_driver.design_range/15.      # Short mission
        altp = design_driver.ref_cruise_altp
        mach = design_driver.cruise_mach
        disa = 30.                                  # Hot condition

        tow,block_fuel,block_time,total_fuel = mission.mission_tow(aircraft,payload,range,altp,mach,disa)

        altp = 0.
        disa = 15.

        pamb,tamb,tstd,dtodz = earth.atmosphere(altp,disa)

        stall_margin = regul.kvs1g_min_take_off()

        czmax_to = aerodynamics.cz_max_to

        mach_s1g = flight.speed_from_lift(aircraft,pamb,tamb,czmax_to,tow)

        mach_35ft = stall_margin*mach_s1g       # V2 speed

        mach_mca = mach_35ft/1.1      #Approximation of required VMCA

        altp = 0.
        disa = 15.

        throttle = 1.
        nei = 1

        pamb,tamb,tstd,dtodz = earth.atmosphere(altp,disa)

        fn,sfc,sec,data = propu.thrust(aircraft,pamb,tamb,mach_mca,MTO,throttle,nei)

        dcx_oei = propu.oei_drag(aircraft,pamb,tamb)

        cn_prop = thrust_yaw_moment(aircraft,fn,pamb,mach_mca,dcx_oei)

        max_bwd_req_cg = xlc_vtp - (cn_prop*wing.mac)/(cyb_vtp*aoa_max_vtp)

        c_of_g.max_bwd_oei_req_cg = c_of_g.max_bwd_req_cg
        c_of_g.max_bwd_oei_cg = max_bwd_req_cg
        c_of_g.max_bwd_oei_mass = tow

        return

    def thrust_yaw_moment(aircraft,fn,pamb,mach,dcx_oei):
        """Computes the yaw moment due to most outboard engine failure
        WARNING : Assumed right engine inoperative
        """
        propulsion = aircraft.propulsion
        wing = aircraft.wing

        r,gam,Cp,Cv = earth.gas_data()

        cn_prop = (propulsion.y_ext_nacelle/wing.mac)*(fn/(0.5*gam*pamb*mach**2*wing.area) + dcx_oei)

        return cn_prop




#===========================================================================================================
def eval_hq0(aircraft):
    """
    Perform hq based empennage sizing without updating characteristic masses MTOW, MLW & MZFW
    """

    aircraft.center_of_gravity.cg_range_optimization = 1    # Start HQ optimization mode

    #===========================================================================================================
    def fct_hq_optim(x_in,aircraft):

        c_g = aircraft.center_of_gravity

        aircraft.wing.x_root = x_in[0]
        aircraft.horizontal_tail.area = x_in[1]
        aircraft.vertical_tail.area = x_in[2]

        eval_aircraft_pre_design(aircraft)   # Solves geometrical coupling without tails areas
        eval_mass_breakdown(aircraft)               # Just mass analysis without any solving
        eval_performance_analysis(aircraft)
        eval_handling_quality_analysis(aircraft)

        y_out = np.array([c_g.cg_constraint_1,
                          c_g.cg_constraint_2,
                          c_g.cg_constraint_3])
        return y_out
    #-----------------------------------------------------------------------------------------------------------

    x_ini = np.array([aircraft.wing.x_root,
                      aircraft.horizontal_tail.area,
                      aircraft.vertical_tail.area])

    fct_arg = aircraft

    output_dict = fsolve(fct_hq_optim, x0=x_ini, args=fct_arg, full_output=True)

    if (output_dict[2]!=1):
        print(output_dict[3])
        raise Exception("Convergence problem in HQ optimization")

    aircraft.wing.x_root = output_dict[0][0]
    aircraft.horizontal_tail.area = output_dict[0][1]
    aircraft.vertical_tail.area = output_dict[0][2]

    eval_mda0(aircraft)

    eval_handling_quality_analysis(aircraft)

    return



